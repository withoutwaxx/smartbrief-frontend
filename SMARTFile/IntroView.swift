//
// IntroView.swift
// Generated by Core Animator version 1.5.2 on 07/02/2018.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

private class _IntroPassthroughView: UIView {
    override func point(inside point: CGPoint, with event: UIEvent?) -> Bool {
        for subview in subviews as [UIView] {
            if subview.point(inside: convert(point, to: subview), with: event) { return true }
        }
        return false
    }
}

@IBDesignable
class IntroView : UIView, CAAnimationDelegate {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 1403, height: 361))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:1403, height:361)
		__scaling__.center = CGPoint(x:701.6, y:180.9)
		__scaling__.clipsToBounds = true
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let smartfileIconSeperate__root = _IntroPassthroughView()
		let smartfileIconSeperate__xScale = _IntroPassthroughView()
		let smartfileIconSeperate__yScale = _IntroPassthroughView()
		let smartfileIconSeperate = UIImageView()
		let imgSmartfileIconSeperate = UIImage(named:"smartfileIconSeperate.png", in: bundle, compatibleWith: nil)
		if imgSmartfileIconSeperate == nil {
			print("** Warning: Could not create image from 'smartfileIconSeperate.png'")
		}
		smartfileIconSeperate.image = imgSmartfileIconSeperate
		smartfileIconSeperate.contentMode = .center
		smartfileIconSeperate.layer.anchorPoint = CGPoint(x:0.511, y:0.510)
		smartfileIconSeperate.bounds = CGRect(x:0, y:0, width:500.0, height:500.0)
		smartfileIconSeperate__root.layer.position = CGPoint(x:190.398, y:185.145)
		smartfileIconSeperate__xScale.transform = CGAffineTransform(scaleX: 0.83, y: 1.00)
		smartfileIconSeperate__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 0.83)
		smartfileIconSeperate__root.transform = CGAffineTransform(rotationAngle: 0.000)
		smartfileIconSeperate__root.addSubview(smartfileIconSeperate__xScale)
		smartfileIconSeperate__xScale.addSubview(smartfileIconSeperate__yScale)
		smartfileIconSeperate__yScale.addSubview(smartfileIconSeperate)
		__scaling__.addSubview(smartfileIconSeperate__root)
		viewsByName["smartfileIconSeperate__root"] = smartfileIconSeperate__root
		viewsByName["smartfileIconSeperate__xScale"] = smartfileIconSeperate__xScale
		viewsByName["smartfileIconSeperate__yScale"] = smartfileIconSeperate__yScale
		viewsByName["smartfileIconSeperate"] = smartfileIconSeperate

		let smartfileIconTextSeperate__root = _IntroPassthroughView()
		let smartfileIconTextSeperate__xScale = _IntroPassthroughView()
		let smartfileIconTextSeperate__yScale = _IntroPassthroughView()
		let smartfileIconTextSeperate = UIImageView()
		let imgSmartfileIconTextSeperate = UIImage(named:"smartfileIconTextSeperate.png", in: bundle, compatibleWith: nil)
		if imgSmartfileIconTextSeperate == nil {
			print("** Warning: Could not create image from 'smartfileIconTextSeperate.png'")
		}
		smartfileIconTextSeperate.image = imgSmartfileIconTextSeperate
		smartfileIconTextSeperate.contentMode = .center
		smartfileIconTextSeperate.bounds = CGRect(x:0, y:0, width:1000.0, height:309.0)
		smartfileIconTextSeperate__root.layer.position = CGPoint(x:852.159, y:191.167)
		smartfileIconTextSeperate__xScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		smartfileIconTextSeperate__yScale.transform = CGAffineTransform(scaleX: 1.00, y: 1.00)
		smartfileIconTextSeperate__root.transform = CGAffineTransform(rotationAngle: 0.000)
		smartfileIconTextSeperate__root.addSubview(smartfileIconTextSeperate__xScale)
		smartfileIconTextSeperate__xScale.addSubview(smartfileIconTextSeperate__yScale)
		smartfileIconTextSeperate__yScale.addSubview(smartfileIconTextSeperate)
		__scaling__.addSubview(smartfileIconTextSeperate__root)
		viewsByName["smartfileIconTextSeperate__root"] = smartfileIconTextSeperate__root
		viewsByName["smartfileIconTextSeperate__xScale"] = smartfileIconTextSeperate__xScale
		viewsByName["smartfileIconTextSeperate__yScale"] = smartfileIconTextSeperate__yScale
		viewsByName["smartfileIconTextSeperate"] = smartfileIconTextSeperate

		self.viewsByName = viewsByName
	}

	// - MARK: Intro

	func addIntroAnimation() {
		addIntroAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addIntroAnimation(completion: ((Bool) -> Void)?) {
		addIntroAnimation(beginTime: 0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addIntroAnimation(removedOnCompletion: Bool) {
		addIntroAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addIntroAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addIntroAnimation(beginTime: 0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addIntroAnimation(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 3.000
			representativeAnimation.delegate = self
			self.layer.add(representativeAnimation, forKey: "Intro")
			self.animationCompletions[layer.animation(forKey: "Intro")!] = complete
		}

		let smartfileIconSeperateRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		smartfileIconSeperateRotationAnimation.duration = 3.000
		smartfileIconSeperateRotationAnimation.values = [0.000, 6.283] as [Float]
		smartfileIconSeperateRotationAnimation.keyTimes = [0.000, 1.000] as [NSNumber]
		smartfileIconSeperateRotationAnimation.timingFunctions = [easeInOutTiming]
		smartfileIconSeperateRotationAnimation.repeatCount = HUGE
		smartfileIconSeperateRotationAnimation.beginTime = beginTime
		smartfileIconSeperateRotationAnimation.fillMode = fillMode
		smartfileIconSeperateRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["smartfileIconSeperate__root"]?.layer.add(smartfileIconSeperateRotationAnimation, forKey:"Intro_Rotation")
	}

	func removeIntroAnimation() {
		self.layer.removeAnimation(forKey: "Intro")
		self.viewsByName["smartfileIconSeperate__root"]?.layer.removeAnimation(forKey: "Intro_Rotation")
	}

	// MARK: CAAnimationDelegate
	func animationDidStop(_ anim: CAAnimation, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimation(forKey: "Intro")
	}
}